# -*- coding: utf-8 -*-
#
# Flask-Login documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 15 18:40:10 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, BooleanField, SubmitField
from wtforms.validators import ValidationError, DataRequired, Required, Length, Email, Regexp, EqualTo

from src.models import User, Post


class LoginForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    password = PasswordField('Password', validators=[DataRequired()])
    remember_me = BooleanField('Remember Me')
    submit = SubmitField('Sign In')


class ForgotPasswordForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    submit = SubmitField('Reset')


class DeleteBook(FlaskForm):
    bookid = StringField('bookid', validators=[DataRequired()])

class RegistrationForm(FlaskForm):
    username = StringField('Username', validators=[DataRequired()])
    name = StringField('Name', validators=[DataRequired()])
    email = StringField('Email', validators=[DataRequired(), Email()])
    password = PasswordField('Password', validators=[DataRequired()])
    confirm = PasswordField(
        'Repeat Password', validators=[DataRequired(), EqualTo('password')])
    location = StringField('Location', validators=[DataRequired()])
    about_me = StringField('About_Me', validators=[DataRequired()])
    submit = SubmitField('Register')

    """
    This form also has two custom validators implemented as methods. When a form de‐
    fines a method with the prefix validate_ followed by the name of a field, the method
    is invoked in addition to any regularly defined validators. In this case, the custom val‐
    idators for email and username ensure that the values given are not duplicates. The
    custom validators indicate a validation error by throwing a ValidationError exception
    with the text of the error message as argument.    
    """
    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()
        if user is not None:
            raise ValidationError('Please use a different username.')

    def validate_email(self, email):
        user = User.query.filter_by(email=email.data).first()
        if user is not None:
            raise ValidationError('Please use a different email address.')


class AddBookForm(FlaskForm):
    book_name = StringField('book_name', validators=[DataRequired()])
    author = StringField('author', validators=[DataRequired()])
    description = StringField('description', validators=[DataRequired()])
    submit = SubmitField('Add')


class AddGenreForm(FlaskForm):
    genre = StringField('genre', validators=[DataRequired()])
    type = StringField('type', validators=[DataRequired()])
    submit = SubmitField('Add')
