# -*- coding: utf-8 -*-
#
# Flask-Login documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 15 18:40:10 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

from datetime import datetime
from flask_login import LoginManager, UserMixin
from flask import render_template, flash, redirect, url_for, request
import logging

from src import app, db, bcrypt, login


@login.user_loader
def load_user(id):
    """ The user loader is registered with Flask-Login with the @login.user_loader decorator.
    Because Flask-Login knows nothing about databases, it needs the application's help in loading a user.
    For that reason, the extension expects that the application will configure a user loader function,
    that can be called to load a user given the ID. This function can be added in the app/models.py module:
    """
    logging.warning('request: %s', request)
    logging.warning('id: %s', id)
    return User.query.get(int(id))

# https://realpython.com/token-based-authentication-with-flask/
class User(UserMixin, db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    email = db.Column(db.String(120), index=True, unique=True)
    username = db.Column(db.String(64), index=True, unique=True)
    password_hash = db.Column(db.String(255), nullable=False)
    password = db.Column(db.String(255), nullable=False)
    confirmed = db.Column(db.Boolean)
    name = db.Column(db.String(64))
    location = db.Column(db.String(64))
    about_me = db.Column(db.String(64))
    member_since = db.Column(db.DateTime)
    # Childrens and reference "Self" (aka author)
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    # "Users"
    superusers = db.relationship('SuperUser', backref='superuser', lazy='dynamic')
    administrators = db.relationship('Administrator', backref='administrator', lazy='dynamic')
    productowners = db.relationship('ProductOwner', backref='productowner', lazy='dynamic')
    developers = db.relationship('Developer', backref='developer', lazy='dynamic')
    engineers = db.relationship('Engineer', backref='engineer', lazy='dynamic')

    @staticmethod
    def generate_fake(count=10):
        from sqlalchemy.exc import IntegrityError
        from random import seed
        import forgery_py
        seed()
        for i in range(count):
            pwd = forgery_py.lorem_ipsum.word()
            u = User(email=forgery_py.internet.email_address(),
                username=forgery_py.internet.user_name(True),
                password_hash=bcrypt.generate_password_hash(pwd),
                password=pwd,
                confirmed=True,
                name=forgery_py.name.full_name(),
                location=forgery_py.address.city(),
                about_me=forgery_py.lorem_ipsum.sentence(),
                member_since=forgery_py.date.date(True))
            db.session.add(u)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()

    def set_password(self, password):
        self.password_hash = bcrypt.generate_password_hash(password)
        self.password = password

    def check_password(self, password):
        return bcrypt.check_password_hash(self.password_hash, password)



class Organisation(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    timestamp = db.Column(db.DateTime)
    # Childrens and reference "Self"
    platforms = db.relationship('Platform', backref='organisation', lazy='dynamic')

    @staticmethod
    def generate_fake(count=4):
        from sqlalchemy.exc import IntegrityError
        from random import seed
        import forgery_py
        seed()
        for i in range(count):
            o = Organisation(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True))
            db.session.add(o)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()

"""
Platform will have devices
Platform will have Sprints
Platform will have applications
    All devices may not be used for Sprints
    Applications have tiers
"""
class Platform(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    organisation_id = db.Column(db.Integer, db.ForeignKey('organisation.id'))
    display_name = db.Column(db.String(140))
    timestamp = db.Column(db.DateTime)
    # Childrens and reference "Self"
    applications = db.relationship('Application', backref='platform', lazy='dynamic')
    Sprints = db.relationship('Sprint', backref='platform', lazy='dynamic')
    devices = db.relationship('Device', backref='platform', lazy='dynamic')
    # The SQLAlchemy relation for the Users contained within this
    # repository.
    # "Users"
    superusers = db.relationship('SuperUser', backref='platform', lazy='dynamic')
    administrators = db.relationship('Administrator', backref='platform', lazy='dynamic')
    productowners = db.relationship('ProductOwner', backref='platform', lazy='dynamic')
    developers = db.relationship('Developer', backref='platform', lazy='dynamic')
    engineers = db.relationship('Engineer', backref='platform', lazy='dynamic')

    @staticmethod
    def generate_fake(count=4):
        from sqlalchemy.exc import IntegrityError
        from random import seed, randint
        import forgery_py
        import testdata
        seed()
        count = Organisation.query.count()
        for i in range(count):
            o = Organisation.query.offset(randint(0, count - 1)).first()
            p = Platform(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                organisation=o)
            db.session.add(p)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()


"""
Device belong to a Platform
Device will be used by multiple Sprints with-in a given Platform
All devices may not be used for Sprints
"""
class Device(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    description = db.Column(db.String(240))
    # state
    active = db.Column(db.Boolean, default=False)
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            d = Device(display_name=forgery_py.address.street_name(),
                description=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                active=True,
                platform=p)
            db.session.add(d)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()


"""
Instance belong to a Platform
Instance will be used by multiple Sprints with-in a given Platform
All Instances may not be used for Sprints
"""
class Instance(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    description = db.Column(db.String(240))
    base_uri = db.Column(db.String(240))
    # state
    active = db.Column(db.Boolean, default=False)
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            d = Instance(display_name=forgery_py.address.street_name(),
                description=forgery_py.name.company_name(),
                base_uri=forgery_py.name.street_name(),
                timestamp=forgery_py.date.date(True),
                active=True,
                platform=p)
            db.session.add(d)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()


"""
Application belong to a Platform
Application will be used by multiple Sprints with-in a given Platform
All Application musy have a Sprint
"""
class Application(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            a = Application(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                platform=p)
            db.session.add(a)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class Sprint(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            r = Sprint(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class SprintType(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            r = Sprint(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class Role(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            r = Sprint(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class VirtualNetwork(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)



class Build(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)



class Deployment(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)



class Subnet(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)



class Lane(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            r = Sprint(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class ApplicationTier(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            r = Sprint(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class IntrastructureStack(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            r = Sprint(display_name=forgery_py.name.company_name(),
                timestamp=forgery_py.date.date(True),
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class Repository(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)



class Artifact(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)



class Build(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    display_name = db.Column(db.String(140))
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)



class SuperUser(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        user_count = User.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            u = User.query.offset(randint(0, user_count - 1)).first()
            r = SuperUser(timestamp=forgery_py.date.date(True),
                superuser=u,
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class Administrator(db.Model):
    """ a very long string ......

    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        user_count = User.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            u = User.query.offset(randint(0, user_count - 1)).first()
            r = Administrator(timestamp=forgery_py.date.date(True),
                administrator=u,
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class ProductOwner(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        user_count = User.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            u = User.query.offset(randint(0, user_count - 1)).first()
            r = ProductOwner(timestamp=forgery_py.date.date(True),
                productowner=u,
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class Developer(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        user_count = User.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            u = User.query.offset(randint(0, user_count - 1)).first()
            r = Developer(timestamp=forgery_py.date.date(True),
                developer=u,
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class Engineer(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    # references
    platform_id = db.Column(db.Integer, db.ForeignKey('platform.id'))
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        platform_count = Platform.query.count()
        user_count = User.query.count()
        for i in range(count):
            p = Platform.query.offset(randint(0, platform_count - 1)).first()
            u = User.query.offset(randint(0, user_count - 1)).first()
            r = Engineer(timestamp=forgery_py.date.date(True),
                engineer=u,
                platform=p)
            db.session.add(r)
            try:
                db.session.commit()
            except IntegrityError:
                db.session.rollback()



class Post(db.Model):
    """ a very long string ......
    ....that can span multiple lines
    """
    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    body = db.Column(db.String(140))
    # references
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    # timestamp
    timestamp = db.Column(db.DateTime, index=True, default=datetime.utcnow)

    @staticmethod
    def generate_fake(count=100):
        from random import seed, randint
        import forgery_py
        seed()
        user_count = User.query.count()
        for i in range(count):
            u = User.query.offset(randint(0, user_count - 1)).first()
            p = Post(body=forgery_py.lorem_ipsum.sentences(randint(1, 3)),
                timestamp=datetime.utcnow(),
                author=u)
            db.session.add(p)
            db.session.commit()
