# -*- coding: utf-8 -*-
#
# Flask-Login documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 15 18:40:10 2011.
#
# This file is execfile()d with the current directory set to its containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

from flask import render_template, flash, redirect, url_for, request
from flask_login import login_user , logout_user , current_user , login_required
import logging

from src import app, db, bcrypt, login
from src.forms import LoginForm, RegistrationForm, ForgotPasswordForm
from src.models import User, Post, Organisation, Platform, Device, Sprint, Application, \
    SuperUser, Administrator, ProductOwner, Developer, Engineer


@login.user_loader
def load_user(id):
    """ The user loader is registered with Flask-Login with the @login.user_loader decorator.
    Because Flask-Login knows nothing about databases, it needs the application's help in loading a user.
    For that reason, the extension expects that the application will configure a user loader function,
    that can be called to load a user given the ID. This function can be added in the app/models.py module:
    """
    logging.warning('request: %s', request)
    logging.warning('id: %s', id)
    return User.query.get(int(id))

@login.unauthorized_handler
def unauth_handler():
    if request.is_xhr:
        return jsonify(success=False,
                       data={'login_required': True},
                       message='Authorize please to access this page.'), 401
    else:
        return render_template('401.html'), 401

@app.route('/init_db')
def init_db():
    """Drops the db tables."""
    db.drop_all()
    """Creates the db tables."""
    db.create_all()
    logging.warning("See this message in Flask Debug Toolbar!")
    return redirect(url_for('generate_fake'))


@app.route('/generate_fake')
def generate_fake():
    """Drops the db tables."""
    # Registered Users
    User.generate_fake(20)
    Post.generate_fake(20)
    # Models
    Organisation.generate_fake(4)
    Platform.generate_fake(4)
    Device.generate_fake(17)
    Application.generate_fake(12)
    Sprint.generate_fake(9)
    # Users
    SuperUser.generate_fake(2)
    Administrator.generate_fake(3)
    ProductOwner.generate_fake(2)
    Developer.generate_fake(9)
    Engineer.generate_fake(11)
    logging.warning("See this message in Flask Debug Toolbar!")
    return redirect(url_for('index'))


@app.route('/')
@app.route('/index')
def index():
    # Registered Users
    users = User.query.all()
    posts = Post.query.all()
    # Models
    organisations = Organisation.query.all()
    platforms = Platform.query.all()
    devices = Device.query.all()
    applications = Application.query.all()
    sprints = Sprint.query.all()
    # Users
    superusers = SuperUser.query.all()
    administrators = Administrator.query.all()
    productowners = ProductOwner.query.all()
    developers = Developer.query.all()
    engineers = Engineer.query.all()
    logging.warning("See this message in Flask Debug Toolbar!")
    return render_template('index.html',
        title='Home',
        users=users,
        posts=posts,
        organisations=organisations,
        platforms=platforms,
        devices=devices, applications=applications, sprints=sprints,
        superusers=superusers, administrators=administrators, productowners=productowners,
        developers=developers, engineers=engineers)


@app.route('/dashboard')
@login_required
def dashboard():
    user = User.query.all()
    posts = Post.query.all()
    return render_template('index.html', title='Home', user=user, posts=posts)


@app.route('/login', methods=['GET', 'POST'])
def login():
    logging.warning('current_user.is_authenticated: %s', current_user.is_authenticated)
    logging.warning('request.method: %s', request.method)
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = LoginForm()
    if form.validate_on_submit():
        logging.warning('form.username.data: %s', form.username.data)
        user = User.query.filter_by(username=form.username.data).first()
        logging.warning(user)
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('login'))
        login_user(user, remember=form.remember_me.data)
        return redirect(url_for('index'))
    return render_template('login.html', title='Sign In', form=form)


@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('index'))


@app.route('/register', methods=['GET', 'POST'])
def register():
    logging.warning('current_user.is_authenticated: %s', current_user.is_authenticated)
    logging.warning('request.method: %s', request.method)
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        logging.warning(user)
        if user is None or not user.check_password(form.password.data):
            flash('User already registered')
            return redirect(url_for('login'))
        user = User(email=form.email.data,
        username=form.username.data,
        password=form.password.data,
        name=form.name.data,
        location=form.location.data,
        about_me=form.about_me.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('Congratulations, you are now a registered user!')
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)



@app.route('/forgotpassword', methods=['GET', 'POST'])
def forgotpassword():
    form = ForgotPasswordForm()
    if form.validate_on_submit():
        flash('Login requested for user {}, remember_me={}'.format(
            form.username.data, form.remember_me.data))
        return redirect(url_for('index'))
    return render_template('forgotpassword.html', title='Sign In', form=form)
